(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{134:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),s=(n(0),n(147)),o={id:"gens",title:"Generators",slug:"property-test-generators.html",sidebar_label:"Generators"},i={unversionedId:"proptest/gens",id:"proptest/gens",isDocsHomePage:!1,title:"Generators",description:"Generated values are provided by instances of the sealed class Gen. You can think of a Gen as kind of like an input",source:"@site/docs/proptest/gens.md",slug:"/proptest/property-test-generators.html",permalink:"/docs/proptest/property-test-generators.html",editUrl:"https://github.com/kotest/kotest/docs/proptest/gens.md",version:"current",sidebar_label:"Generators",sidebar:"proptest",previous:{title:"Property Test Functions",permalink:"/docs/proptest/property-test-functions.html"},next:{title:"Generators List",permalink:"/docs/proptest/property-test-generators-list.html"}},l=[{value:"Arbitrary",id:"arbitrary",children:[]},{value:"Exhaustive",id:"exhaustive",children:[]}],p={rightToc:l};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Generated values are provided by instances of the sealed class ",Object(s.b)("inlineCode",{parentName:"p"},"Gen"),". You can think of a ",Object(s.b)("inlineCode",{parentName:"p"},"Gen")," as kind of like an input\nstream but for property test values. Each Gen will provide a (usually) infinite stream of these values for one\nparticular type."),Object(s.b)("p",null,"Kotest has two types of generators - ",Object(s.b)("inlineCode",{parentName:"p"},"Arb")," for generating arbitrary (random) values and ",Object(s.b)("inlineCode",{parentName:"p"},"Exhaustive")," for generating a\nfinite set of values in a closed space."),Object(s.b)("p",null,"Both types of gens can be mixed and matched in property tests. For example, you could test a function with 100 random\npositive integers (an arb) alongside every even number from 0 to 200 (exhaustive)."),Object(s.b)("p",null,"Some generators are only available on the JVM. See the full list ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/proptest/property-test-generators-list.html"}),"here"),"."),Object(s.b)("h2",{id:"arbitrary"},"Arbitrary"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"Arb"),"s generate two types of values - a hard coded set of ",Object(s.b)("em",{parentName:"p"},"edge cases")," and an infinite stream of ",Object(s.b)("em",{parentName:"p"},"randomly chosen\nvalues"),"."),Object(s.b)("p",null,"The random values may be repeated, and some values may never be generated at all. For example generating 1000 random\nintegers between 0 and Int.MAX will clearly not return all possible values, and some values may happen to be generated\nmore than once. Similarly, generating 1000 random integers between 0 and 500, will definitely result in some values\nappearing more than once."),Object(s.b)("p",null,"Typical arbs include numbers with or without a range, strings in the unicode set, random lists, data classes with random\nparameters, emails, codepoints, chars and much more."),Object(s.b)("p",null,'In addition to the random values, arbs may provide edge cases. One of the design features of Kotest\'s property testing\nis that values for some types will always include "common" edge cases that you probably want to be included in your\ntests.'),Object(s.b)("p",null,'For example, when testing a function that accepts an integer, you probably want to ensure that at the very least, it is\ntested with zero, a positive number and a negative number. If only random values were provided, the chances of zero\nappearing would be fairly low, so Kotest will always provide some "edge cases" for integers (unless you specify\notherwise).'),Object(s.b)("p",null,"These edge cases are enumerated first, then the random values are used."),Object(s.b)("p",null,"Not all arbs have edge cases, but the arbs for the most common types do. Here are some examples of edge cases used by\ncertain arbs:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"ints: 0, 1, -1, Int.MAX_VALUE, Int.MIN_VALUE"),Object(s.b)("li",{parentName:"ul"},"strings: empty string, string of min length"),Object(s.b)("li",{parentName:"ul"},"lists: empty list"),Object(s.b)("li",{parentName:"ul"},"maps: empty map"),Object(s.b)("li",{parentName:"ul"},"nullable values: null")),Object(s.b)("h2",{id:"exhaustive"},"Exhaustive"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"Exhaustive"),"s generate all values from a given space. This is useful when you want to ensure every value in that space\nis used. For example, for enum values, it is usually more helpful to ensure each enum is used, rather than picking\nrandomly from the enums values and potentially missing some and duplicating others."),Object(s.b)("p",null,"Typical exhaustives include small collections, enums, boolean values, powerset of a list or set, pre-defined integer\nranges, and predefined string ranges."),Object(s.b)("p",null,"Once an exhaustive has provided all it's values, it will loop and start again, so an exhaustive can be used in a test\nthat requires any number of inputs."),Object(s.b)("p",null,"For example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{}),"enum class Season { Winter, Fall, Spring Summer }\n\nforAll<Int, Season>(100) { a, season -> ... }\n")),Object(s.b)("p",null,"Here we asked for 100 iterations, so each value of Season would be provided 25 times."))}u.isMDXComponent=!0},147:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),u=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=r,m=c["".concat(o,".").concat(d)]||c[d]||b[d]||s;return n?a.a.createElement(m,i(i({ref:t},p),{},{components:n})):a.a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);